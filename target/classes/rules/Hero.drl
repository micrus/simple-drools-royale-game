//created on: 5 mag 2021
package com.sample


 //Può muoversi a destra
 rule "MOVE RIGHT"
 salience hero.getStat(StatAbility.SPEED) * 100
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_RIGHT ) and
		hero : Hero ( row < setting.getDimension() - 1 ) and
		not Wall (col == hero.getCol() && row == hero.getRow() +1 )and
		not NPC (col == hero.getCol() && row == hero.getRow() +1 )
	then
       System.out.println("Move Right!");
       hero.moveRight();
	   hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );
 end
 
  //Non può muoversi perchè ha un muro a destra
  rule "CANNOT MOVE RIGHT 1"
  salience hero.getStat(StatAbility.SPEED) * 100
  
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_RIGHT ) and
		hero : Hero ( ) and
		(Wall (col == hero.getCol() && row == hero.getRow() +1 ) or
		NPC (col == hero.getCol() && row == hero.getRow() +1 ))
	then
       System.out.println("Cannote move Right!");
       hero.setStatus(Status.MOVED);       
       retract ( action );
       update ( hero );
 end
  
   //Non può muoversi perchè è ai bordi
   rule "CANNOT MOVE RIGHT 2"
   salience hero.getStat(StatAbility.SPEED) * 100
   
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_RIGHT ) and
		hero : Hero ( row >= setting.getDimension() - 1 )
	then
       System.out.println("Cannot move Right!");
       hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );
       
 end
  

 rule "MOVE DOWN"
 salience hero.getStat(StatAbility.SPEED) * 100
 
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_DOWN ) and
		hero : Hero ( col < setting.getDimension() - 1 )and 
		not Wall (col == hero.getCol()+1 && row == hero.getRow() )and 
		not NPC (col == hero.getCol()+1 && row == hero.getRow() )
		
    then
       System.out.println("Move down!");
       hero.moveDown();
       hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );
 end
 
 rule "CANNOT MOVE DOWN 1"
 salience hero.getStat(StatAbility.SPEED) * 100
 
    when
	    setting : Settings(gameOver == false )
		action : PlayerAction( action == Moves.GO_DOWN ) and
		hero : Hero ( col >= setting.getDimension() - 1 )
		
    then
       System.out.println("Cannot Move down!");
       hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );
 end
 
  rule "CANNOT MOVE DOWN 2"
  salience hero.getStat(StatAbility.SPEED) * 100
  
    when
	    setting : Settings( gameOver == false )
	    hero : Hero ( )
		action : PlayerAction( action == Moves.GO_DOWN ) and
		(Wall ( col == hero.getCol()+1 && row == hero.getRow() ) or
		NPC (col == hero.getCol()+1 && row == hero.getRow()) )
		
    then
       System.out.println("Cannot Move down!");
       hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );
 end
 
 
  rule "MOVE UP"
  salience hero.getStat(StatAbility.SPEED) * 100
  
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_UP ) and
		hero : Hero ( col > 0 ) and
		not Wall (col == hero.getCol()-1 && row == hero.getRow())and
		not NPC (col == hero.getCol()-1 && row == hero.getRow())
		
    then
       System.out.println("Move up!");
       hero.moveUp();
       hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );
 end
 
   rule "CANNOT MOVE UP 1"
   salience hero.getStat(StatAbility.SPEED) * 100
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_UP ) and
		hero : Hero ( col <= 0 ) 
		
    then
       System.out.println("Cannot Move up!");
       hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );
 end
 
   rule "CANNOT MOVE UP 2"
   salience hero.getStat(StatAbility.SPEED) * 100
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_UP) and
		hero : Hero ( ) and
	    (Wall (col == hero.getCol()-1 && row == hero.getRow()) or
	    NPC (col == hero.getCol()-1 && row == hero.getRow()))
		
    then
       System.out.println("Cannot Move up!");
       hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );
 end
 
 
   rule "MOVE LEFT"
   salience hero.getStat(StatAbility.SPEED) * 100
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_LEFT ) and
		hero : Hero ( row > 0 ) and 
		not Wall (col == hero.getCol() && row == hero.getRow()-1) and
		not NPC (col == hero.getCol() && row == hero.getRow()-1)
		
    then
       System.out.println("Move left!");
       hero.moveLeft();
       hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );
 end
 
   rule "CANNOT MOVE LEFT 1"
   salience hero.getStat(StatAbility.SPEED) * 100
   
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_LEFT ) and
		hero : Hero ( row <= 0 ) 
		
    then
       System.out.println("Cannot Move left!");
       hero.setStatus(Status.MOVED);
       retract( action );
       update ( hero );
 end
 
    rule "CANNOT MOVE LEFT 2"
    salience hero.getStat(StatAbility.SPEED) * 100
    
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_LEFT ) and
		hero : Hero (  ) and 
		(Wall (col == hero.getCol() && row == hero.getRow()-1) or
		NPC (col == hero.getCol() && row == hero.getRow()-1))
		
    then
       System.out.println("Cannot Move left!");
       hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );
 end
 
 

 
 
 
 
 
 
 
 // REGOLE PER IL COMBATTIMENTO
 
    rule "ATTACK RIGHT"
    salience hero.getStat(StatAbility.SPEED) * 100
    
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_RIGHT) and
		hero : Hero () and 
		npc: NPC (col == hero.getCol() && row == hero.getRow()+1)
		
    then
       System.out.println("Attacking enemy!");
       npc.increment(StatAbility.LIFE, -(hero.getStat(StatAbility.ATK)));
       hero.setStatus(Status.MOVED);
	   retract( action );
	   update ( hero );       
       update ( npc );       

 end
 
     rule "ATTACK RIGHT BUT NO ENEMY"
     salience hero.getStat(StatAbility.SPEED) * 100
     
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_RIGHT ) and
		hero : Hero () and 
		not NPC (col == hero.getCol() && row == hero.getRow()+1)
		
    then
       System.out.println("Everyone fights their inner demons ... but there is no need to attack the wind!");
       hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );

 end
 
   rule "ATTACK LEFT"
   salience hero.getStat(StatAbility.SPEED) * 100
   
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_LEFT) and
		hero : Hero () and 
		npc: NPC (col == hero.getCol() && row == hero.getRow()-1)
		
    then
       System.out.println("Attacking enemy!");
       npc.increment(StatAbility.LIFE, -(hero.getStat(StatAbility.ATK)));
       hero.setStatus(Status.MOVED);
       update ( npc );  
       update ( hero );     
       retract( action );

 end
 
     rule "ATTACK LEFT BUT NO ENEMY"
     salience hero.getStat(StatAbility.SPEED) * 100
     
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_LEFT ) and
		hero : Hero () and 
		not NPC (col == hero.getCol() && row == hero.getRow()-1)
		
    then
       System.out.println("Everyone fights their inner demons ... but there is no need to attack the wind!");
       hero.setStatus(Status.MOVED);
       retract( action );
       update ( hero );

 end
 
    rule "ATTACK UP"
    salience hero.getStat(StatAbility.SPEED) * 100
    
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_UP ) and
		hero : Hero () and 
		npc: NPC (col == hero.getCol()-1 && row == hero.getRow())
		
    then
       System.out.println("Attacking enemy!");
       npc.increment(StatAbility.LIFE, -(hero.getStat(StatAbility.ATK)));
       hero.setStatus(Status.MOVED);
       retract( action );
       update ( npc );  
       update( hero );     

 end
 
     rule "ATTACK UP BUT NO ENEMY"
     salience hero.getStat(StatAbility.SPEED) * 100
     
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_UP ) and
		hero : Hero () and 
		not NPC (col == hero.getCol()-1 && row == hero.getRow())
		
    then
       System.out.println("Everyone fights their inner demons ... but there is no need to attack the wind!");
       hero.setStatus(Status.MOVED);
       retract( action );
	   update( hero );
 end
 
     rule "ATTACK DOWN"
     salience hero.getStat(StatAbility.SPEED) * 100
     
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_DOWN ) and
		hero : Hero () and 
		npc: NPC (col == hero.getCol()+1 && row == hero.getRow())
		
    then
       System.out.println("Attacking enemy!");
       npc.increment(StatAbility.LIFE, -(hero.getStat(StatAbility.ATK)));
       hero.setStatus(Status.MOVED);
	   retract( action );
       update ( npc );       
       update( hero );

 end
 
     rule "ATTACK DOWN BUT NO ENEMY"
     salience hero.getStat(StatAbility.SPEED) * 100
     
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_DOWN) and
		hero : Hero () and 
		not NPC (col == hero.getCol()+1 && row == hero.getRow())
		
    then
       System.out.println("Everyone fights their inner demons ... but there is no need to attack the wind!");
       hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );

 end
 
 rule "REMOVE DIED PG" 
 	when 
 		character: Character ( actualStat.getStat(StatAbility.LIFE)<=0 )
 	then 
 		retract (character);
 end
 
 
 
 /*
 
 PARTE RELATIVA AL DRAFTING
  
 */
 
 rule "DRAFT"
 salience hero.getStat(StatAbility.SPEED) * 100
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.DRAFT ) and
		hero : Hero () and 
		draft: DraftObject (col == hero.getCol() && row == hero.getRow())
		
    then
       System.out.println("Drafting...");
       hero.increment( draft.getStatToIncrease(), draft.getBonus());
       draft.setAvaiability(draft.getAvaiability() - 1); 
       
       System.out.println("New stats: "+hero.getActualStat().toString() );
       
       hero.setStatus(Status.MOVED);
       retract( action );
       update ( hero );
       update ( draft );       

 end
 
rule "REMOVE DRAFT"
salience 100000
    when
		
		draft: DraftObject ( avaiability <= 0 )
		
    then
    	
    	retract( draft );

 	end
 
  
rule "DRAFT WITHOUT OBJECT"
salience hero.getStat(StatAbility.SPEED) * 100
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.DRAFT ) and
		hero : Hero () and 
		not DraftObject (col == hero.getCol() && row == hero.getRow())
		
    then
       System.out.println("Some might say that 'he who seeks finds', but this time you only found mud");
       hero.setStatus(Status.MOVED);
       retract( action );
       update(hero);

 end
 