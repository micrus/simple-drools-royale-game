package com.sample
 
 /*
 ====== SET DI REGOLE PER GESTIRE IL MOVIMENTO DEL PERSONAGGIO
 */
 
 
 //Può muoversi a destra
 rule "MOVE RIGHT"
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_RIGHT && state == MovesState.PERFORMING ) and
		hero : Hero ( row < setting.getDimension() - 1 ) and
		not Wall (col == hero.getCol() && row == hero.getRow() +1 )and
		not NPC (col == hero.getCol() && row == hero.getRow() +1 )
	then
       System.out.println("Move Right!");
       hero.setRow(hero.getRow()+1);
       action.setState(MovesState.FINISHED);
       update( action );
       update( hero );
 end
 
  //Non può muoversi perchè ha un muro a destra
  rule "CANNOT MOVE RIGHT 1"
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_RIGHT && state == MovesState.PERFORMING ) and
		hero : Hero ( ) and
		(Wall (col == hero.getCol() && row == hero.getRow() +1 ) or
		NPC (col == hero.getCol() && row == hero.getRow() +1 ))
	then
       System.out.println("Cannote move Right!");
       action.setState(MovesState.FINISHED);
       update( action );
 end
  
   //Non può muoversi perchè è ai bordi
   rule "CANNOT MOVE RIGHT 2"
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_RIGHT && state == MovesState.PERFORMING ) and
		hero : Hero ( row >= setting.getDimension() - 1 )
	then
       System.out.println("Cannot move Right!");
       action.setState(MovesState.FINISHED);
       update( action );
 end
  

 rule "MOVE DOWN"
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_DOWN && state == MovesState.PERFORMING ) and
		hero : Hero ( col < setting.getDimension() - 1 )and 
		not Wall (col == hero.getCol()+1 && row == hero.getRow() )and 
		not NPC (col == hero.getCol()+1 && row == hero.getRow() )
		
    then
       System.out.println("Move down!");
       hero.setCol(hero.getCol()+1);
       action.setState(MovesState.FINISHED);
       update( action );
       update( hero );
 end
 
 rule "CANNOT MOVE DOWN 1"
    when
	    setting : Settings(gameOver == false )
		action : PlayerAction( action == Moves.GO_DOWN && state == MovesState.PERFORMING ) and
		hero : Hero ( col >= setting.getDimension() - 1 )
		
    then
       System.out.println("Cannot Move down!");
       action.setState(MovesState.FINISHED);
       update( action );
 end
 
  rule "CANNOT MOVE DOWN 2"
    when
	    setting : Settings( gameOver == false )
	    hero : Hero ( )
		action : PlayerAction( action == Moves.GO_DOWN && state == MovesState.PERFORMING ) and
		(Wall ( col == hero.getCol()+1 && row == hero.getRow() ) or
		NPC (col == hero.getCol()+1 && row == hero.getRow()) )
		
    then
       System.out.println("Cannot Move down!");
       action.setState(MovesState.FINISHED);
       update( action );
 end
 
 
  rule "MOVE UP"
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_UP && state == MovesState.PERFORMING ) and
		hero : Hero ( col > 0 ) and
		not Wall (col == hero.getCol()-1 && row == hero.getRow())and
		not NPC (col == hero.getCol()-1 && row == hero.getRow())
		
    then
       System.out.println("Move up!");
       hero.setCol(hero.getCol()-1);
       action.setState(MovesState.FINISHED);
       update( action );
       update( hero );
 end
 
   rule "CANNOT MOVE UP 1"
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_UP && state == MovesState.PERFORMING ) and
		hero : Hero ( col <= 0 ) 
		
    then
       System.out.println("Cannot Move up!");
       action.setState(MovesState.FINISHED);
       update( action );
 end
 
   rule "CANNOT MOVE UP 2"
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_UP && state == MovesState.PERFORMING ) and
		hero : Hero ( ) and
	    (Wall (col == hero.getCol()-1 && row == hero.getRow()) or
	    NPC (col == hero.getCol()-1 && row == hero.getRow()))
		
    then
       System.out.println("Cannot Move up!");
       action.setState(MovesState.FINISHED);
       update( action );
 end
 
 
   rule "MOVE LEFT"
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_LEFT && state == MovesState.PERFORMING ) and
		hero : Hero ( row > 0 ) and 
		not Wall (col == hero.getCol() && row == hero.getRow()-1) and
		not NPC (col == hero.getCol() && row == hero.getRow()-1)
		
    then
       System.out.println("Move left!");
       hero.setRow(hero.getRow()-1);
       action.setState(MovesState.FINISHED);
       update( action );
       update( hero );
 end
 
   rule "CANNOT MOVE LEFT 1"
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_LEFT && state == MovesState.PERFORMING ) and
		hero : Hero ( row <= 0 ) 
		
    then
       System.out.println("Cannot Move left!");
       action.setState(MovesState.FINISHED);
       update( action );
 end
 
    rule "CANNOT MOVE LEFT 2"
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_LEFT && state == MovesState.PERFORMING ) and
		hero : Hero (  ) and 
		(Wall (col == hero.getCol() && row == hero.getRow()-1) or
		NPC (col == hero.getCol() && row == hero.getRow()-1))
		
    then
       System.out.println("Cannot Move left!");
       action.setState(MovesState.FINISHED);
       update( action );
 end
 
 





/**
SET DI REGOLE PER I TURNI E LA RIMOZIONE DELLE AZIONI
*/



//Remove each action that have been accomplished
 rule "REMOVE ACTION"
    when
    	setting : Settings( gameOver == false ) and
		action : PlayerAction(state == MovesState.FINISHED ) 
    then
 	   retract( action );
 end
 
 rule "TURN" salience 100
 	when 
 		setting : Settings( gameOver == false ) and
 		not PlayerAction ( )
 	then
 		setting.setTime(setting.getTime() + 1);
 		update (setting)
 end
 
 
 
 
/**
=========SET DI REGOLE PER IL RIMPICCIOLIMENTO DEL CAMPO
*/


 
 // Rule that handle the shrinking of the map
  rule "REMOVE PG OF THE BORDER" salience 10
    when
    	setting : Settings( time!=0 && (time % 10) == 0 && gameOver == false) and
		npc : LocatedOnMap ( ((col in (setting.getLimitColLeft() , setting.getLimitColRight())) || (row in (setting.getLimitRowUp() , setting.getLimitRowDown())))&& removable == 1 )  
    then
		retract (npc);
 end
 
   rule "EFFECTIVELY REMOVE PORTIONS OF MAP" salience 10 
    when
    	setting: Settings( time!= 0 && (time % 10) == 0 && gameOver == false) and
		not LocatedOnMap ( ((col in (setting.getLimitColLeft() , setting.getLimitColRight())) || (row in (setting.getLimitRowUp() , setting.getLimitRowDown()))) && removable == 1 )  
    then
	
		
		for (int i = setting.getLimitColLeft(); i<=setting.getLimitColRight(); i++){
			
			insert ( new Wall("#", i, setting.getLimitRowUp()) );
			insert ( new Wall("#", i, setting.getLimitRowDown()) );
			
		}
		
		for (int i = setting.getLimitRowUp() + 1; i<=setting.getLimitRowDown() -1; i++){
			
			insert ( new Wall("#", setting.getLimitColLeft(), i) );
			insert ( new Wall("#", setting.getLimitColRight(), i) );
			
		}
		
		setting.decreaseLimit();
		setting.setTime( setting.getTime() + 1);
		update ( setting );
 end
 
 
 // REGOLE PER IL COMBATTIMENTO
 
    rule "ATTACK RIGHT"
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_RIGHT && state == MovesState.PERFORMING ) and
		hero : Hero () and 
		npc: NPC (col == hero.getCol() && row == hero.getRow()+1)
		
    then
       System.out.println("Attacking enemy!");
       npc.increment(StatAbility.LIFE, -(hero.getStat(StatAbility.ATK)));
       action.setState(MovesState.FINISHED);
       
       update ( npc );       
       update( action );

 end
 
     rule "ATTACK RIGHT BUT NO ENEMY"
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_RIGHT && state == MovesState.PERFORMING ) and
		hero : Hero () and 
		not NPC (col == hero.getCol() && row == hero.getRow()+1)
		
    then
       System.out.println("Everyone fights their inner demons ... but there is no need to attack the wind!");
       action.setState(MovesState.FINISHED);
       update( action );

 end
 
   rule "ATTACK LEFT"
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_LEFT && state == MovesState.PERFORMING ) and
		hero : Hero () and 
		npc: NPC (col == hero.getCol() && row == hero.getRow()-1)
		
    then
       System.out.println("Attacking enemy!");
       npc.increment(StatAbility.LIFE, -(hero.getStat(StatAbility.ATK)));
       action.setState(MovesState.FINISHED);
       update ( npc );       
       update( action );

 end
 
     rule "ATTACK LEFT BUT NO ENEMY"
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_LEFT && state == MovesState.PERFORMING ) and
		hero : Hero () and 
		not NPC (col == hero.getCol() && row == hero.getRow()-1)
		
    then
       System.out.println("Everyone fights their inner demons ... but there is no need to attack the wind!");
       action.setState(MovesState.FINISHED);
       update( action );

 end
 
    rule "ATTACK UP"
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_UP && state == MovesState.PERFORMING ) and
		hero : Hero () and 
		npc: NPC (col == hero.getCol()-1 && row == hero.getRow())
		
    then
       System.out.println("Attacking enemy!");
       npc.increment(StatAbility.LIFE, -(hero.getStat(StatAbility.ATK)));
       action.setState(MovesState.FINISHED);
       update ( npc );       
       update( action );

 end
 
     rule "ATTACK UP BUT NO ENEMY"
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_UP && state == MovesState.PERFORMING ) and
		hero : Hero () and 
		not NPC (col == hero.getCol()-1 && row == hero.getRow())
		
    then
       System.out.println("Everyone fights their inner demons ... but there is no need to attack the wind!");
       action.setState(MovesState.FINISHED);
       update( action );

 end
 
     rule "ATTACK DOWN"
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_DOWN && state == MovesState.PERFORMING ) and
		hero : Hero () and 
		npc: NPC (col == hero.getCol()+1 && row == hero.getRow())
		
    then
       System.out.println("Attacking enemy!");
       npc.increment(StatAbility.LIFE, -(hero.getStat(StatAbility.ATK)));
       action.setState(MovesState.FINISHED);
       update ( npc );       
       update( action );

 end
 
     rule "ATTACK DOWN BUT NO ENEMY"
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_DOWN && state == MovesState.PERFORMING ) and
		hero : Hero () and 
		not NPC (col == hero.getCol()+1 && row == hero.getRow())
		
    then
       System.out.println("Everyone fights their inner demons ... but there is no need to attack the wind!");
       action.setState(MovesState.FINISHED);
       update( action );

 end
 
 rule "REMOVE DIED PG"
 	when 
 		character: Character ( actualStat.getStat(StatAbility.LIFE)<=0 )
 	then 
 		retract (character);
 end
 
 /**
 SET DI REGOLE PER LA VITTORIA O LA SCONFITTA
 */
 
 rule "LOSE GAME BECAUSE YOU DIE"
 	when 
 		setting: Settings( gameOver == false ) and
 		not Hero( )
 	then 
 		setting.setGameOver(true);
 		update (setting);
 end
 
 rule "WIN GAME BECAUSE YOU ARE THE ONLY ONE"
 	when 
 		setting: Settings( gameOver == false ) and
 		Hero( ) and
 		not NPC( )
 	then 
 		setting.setGameOver(true);
 		update (setting);
 end
 
 
 /*
 
 PARTE RELATIVA AL DRAFTING
  
 */
 
 rule "DRAFT"
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.DRAFT && state == MovesState.PERFORMING ) and
		hero : Hero () and 
		draft: DraftObject (col == hero.getCol() && row == hero.getRow())
		
    then
       System.out.println("Drafting...");
       hero.increment( draft.getStatToIncrease(), draft.getBonus());
       draft.setAvaiability(draft.getAvaiability() - 1); 
       action.setState(MovesState.FINISHED);
       
       System.out.println("New stats: "+hero.getActualStat().toString() );
       update ( hero );
       update ( draft );       
       update( action );

 end
 
       rule "REMOVE DRAFT"
       salience 10
    when
		
		draft: DraftObject ( avaiability <= 0 )
		
    then
    	
    	retract( draft );

 	end
 
  
	rule "DRAFT WITHOUT OBJECT"
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.DRAFT && state == MovesState.PERFORMING ) and
		hero : Hero () and 
		not DraftObject (col == hero.getCol() && row == hero.getRow())
		
    then
       System.out.println("Some might say that 'he who seeks finds', but this time you only found mud");
       action.setState(MovesState.FINISHED);     
       update( action );

 end
 
 /*
 
 
 
 
 
 Cose da fare sicuramente:
 	
 	Implementare crafting
 	Implementare IA
 
 
 */
 
 
