package com.sample
import java.util.concurrent.ThreadLocalRandom;

rule "MOVE RIGHT"
 salience action.getPriority()
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_RIGHT, whoMoves : whoMoves  ) 
		character : Character (this == whoMoves && status== Status.NOT_MOVED && row < setting.getDimension() - 1 ) 
		not LocatedOnMap (steppable==0 && col == character.getCol() && (row == character.getRow() +1) )
	
	then
       System.out.println(character.getSimbol()+" move right!");
       character.moveRight();
	   character.setStatus(Status.MOVED);
       update( character );
 end

rule "MOVE LEFT"
 salience action.getPriority()
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_LEFT, whoMoves : whoMoves  ) 
		character : Character (this == whoMoves && status== Status.NOT_MOVED && row > 0 ) 
		not LocatedOnMap (steppable==0 && col == character.getCol() && (row == character.getRow() -1) )
	
	then
       System.out.println(character.getSimbol()+" move left!");
       character.moveLeft();
	   character.setStatus(Status.MOVED);
       update( character );
 end

rule "MOVE UP"
 salience action.getPriority()
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_UP, whoMoves : whoMoves  ) 
		character : Character (this == whoMoves && status== Status.NOT_MOVED && col > 0 ) 
		not LocatedOnMap (steppable==0 && col == character.getCol()-1 && (row == character.getRow()) )
	
	then
       System.out.println(character.getSimbol()+" move up!");
       character.moveUp();
	   character.setStatus(Status.MOVED);
       update( character );
 end
 
rule "MOVE DOWN"
 salience action.getPriority()
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_DOWN, whoMoves : whoMoves  ) 
		character : Character (this == whoMoves && status== Status.NOT_MOVED && col < setting.getDimension() - 1 ) 
		not LocatedOnMap (steppable==0 && col == character.getCol()+1 && (row == character.getRow()) )
	
	then
       System.out.println(character.getSimbol()+" move down!");
       character.moveDown();
	   character.setStatus(Status.MOVED);
       update( character );
 end
 
rule "MOVE DOWN-RIGHT"
 salience action.getPriority()
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_DOWN_RIGHT, whoMoves : whoMoves  ) 
		character : Character (this == whoMoves && status== Status.NOT_MOVED && col < setting.getDimension() - 1 && row < setting.getDimension() - 1) 
		not LocatedOnMap (steppable==0 && col == character.getCol()+1 && (row == character.getRow()+1) )
		
	
	then
       System.out.println(character.getSimbol()+" move down-right!");
       character.moveDownRight();
	   character.setStatus(Status.MOVED);
       update( character );
 end
 
 rule "MOVE DOWN-LEFT"
 salience action.getPriority()
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_DOWN_LEFT, whoMoves : whoMoves  ) 
		character : Character (this == whoMoves && status== Status.NOT_MOVED && col < setting.getDimension() - 1 && row > 0) 
		not LocatedOnMap (steppable==0 && col == character.getCol()+1 && (row == character.getRow()-1) )
		
	
	then
       System.out.println(character.getSimbol()+" move down-left!");
       character.moveDownLeft();
	   character.setStatus(Status.MOVED);
       update( character );
 end

rule "MOVE UP-RIGHT"
 salience action.getPriority()
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_UP_RIGHT, whoMoves : whoMoves  ) 
		character : Character (this == whoMoves && status== Status.NOT_MOVED && col >0 && row < setting.getDimension() - 1) 
		not LocatedOnMap (steppable==0 && col == character.getCol()-1 && (row == character.getRow()+1) )
		
	
	then
       System.out.println(character.getSimbol()+" move up-right!");
       character.moveUpRight();
	   character.setStatus(Status.MOVED);
       update( character );
 end
 
 rule "MOVE UP-LEFT"
 salience action.getPriority()
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_UP_LEFT, whoMoves : whoMoves  ) 
		character : Character (this == whoMoves && status== Status.NOT_MOVED && col >0 && row >0) 
		not LocatedOnMap (steppable==0 && col == character.getCol()-1 && (row == character.getRow()-1) )
		
	
	then
       System.out.println(character.getSimbol()+" move up-left!");
       character.moveUpLeft();
	   character.setStatus(Status.MOVED);
       update( character );
 end
 
 
   rule "PUT TRAP"
   salience action.getPriority()
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.PUT_TRAP, whoMoves : whoMoves ) 
		character : Character (this == whoMoves && status== Status.NOT_MOVED )
		not craft: CraftObject (col == character.getCol() && row == character.getRow())
		
    then
       System.out.println(character.getSimbol()+" is putting trap...");
       int randomMalus = ThreadLocalRandom.current().nextInt(0, character.getStat(StatAbility.SHREWDNESS) + 1);
       insert (new CraftObject(character.getCol() , character.getRow() ,StatAbility.LIFE, -randomMalus, 1) );
       character.setStatus(Status.MOVED);
       update ( character );
 end


 rule "CRAFT"
 salience action.getPriority()
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.CRAFT, whoMoves : whoMoves ) 
		character : Character (this == whoMoves && status== Status.NOT_MOVED )
		craft: CraftObject (col == character.getCol() && row == character.getRow())
		
    then
       System.out.println(character.getSimbol()+" is crafting... "+craft.getStatToIncrease()+" increment of "+craft.getBonus());
       character.increment(craft.getStatToIncrease(), craft.getBonus());
       craft.setAvaiability(craft.getAvaiability() - 1); 
              
       character.setStatus(Status.MOVED);
       update ( craft );        
       update ( character );

 end
 

rule "INVALID MOVE"
	when 
		hero : Hero (status == Status.NOT_MOVED)
	then 
		System.out.println("What are you doing? Fight instead of waisting time in useless action!");
		hero.setStatus(Status.MOVED);
		update (hero);
end

rule "REMOVE CRAFT"
salience 100000
    when	
		craft: CraftObject ( avaiability <= 0 )	
    then  	
    	retract( craft );
 	end
 

rule "RETRACT ACTION"
when 
    action:	PlayerAction()
	not Character(status == Status.NOT_MOVED)
then 
	retract (action)
end

/*
rule "MOVE RIGHT"
 salience hero.getStat(StatAbility.SPEED) * 100
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_RIGHT ) 
		hero : Hero ( row < setting.getDimension() - 1 ) 
		not LocatedOnMap (steppable==0 && col == hero.getCol() && (row == hero.getRow() +1) )
	
	then
       System.out.println("Move Right!");
       hero.moveRight();
	   hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );
 end
 


  rule "CANNOT MOVE RIGHT 1"
  salience hero.getStat(StatAbility.SPEED) * 100
  
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_RIGHT ) 
		hero : Hero ( ) 
		LocatedOnMap (steppable == 0 && col == hero.getCol() && row == hero.getRow() +1 ) 
	then
       System.out.println("Cannote move Right!");
       hero.setStatus(Status.MOVED);       
       retract ( action );
       update ( hero );
 end
  



   rule "CANNOT MOVE RIGHT 2"
   salience hero.getStat(StatAbility.SPEED) * 100
   
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_RIGHT ) 
		hero : Hero ( row >= setting.getDimension() - 1 )
	then
       System.out.println("Cannot move Right!");
       hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );
       
 end
  


 rule "MOVE DOWN"
 salience hero.getStat(StatAbility.SPEED) * 100
 
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_DOWN ) 
		hero : Hero ( col < setting.getDimension() - 1 ) 
		not LocatedOnMap (steppable==0 && col == hero.getCol()+1 && row == hero.getRow() )

		
    then
       System.out.println("Move down!");
       hero.moveDown();
       hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );
 end



 
rule "CANNOT MOVE DOWN 1"
salience hero.getStat(StatAbility.SPEED) * 100
 
    when
	    setting : Settings(gameOver == false )
		action : PlayerAction( action == Moves.GO_DOWN ) 
		hero : Hero ( col >= setting.getDimension() - 1 )
		
    then
       System.out.println("Cannot Move down!");
       hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );
 end
 
 
 
 
 rule "CANNOT MOVE DOWN 2"
 salience hero.getStat(StatAbility.SPEED) * 100
  
    when
	    setting : Settings( gameOver == false )
	    hero : Hero ( )
		action : PlayerAction( action == Moves.GO_DOWN ) 
		LocatedOnMap (steppable==0 && col == hero.getCol()+1 && row == hero.getRow() )

		
    then
       System.out.println("Cannot Move down!");
       hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );
 end
 
 
 
 rule "MOVE UP"
 salience hero.getStat(StatAbility.SPEED) * 100
  
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_UP ) 
		hero : Hero ( col > 0 ) 
		not LocatedOnMap (steppable==0 && col == hero.getCol()-1 && row == hero.getRow())

		
    then
       System.out.println("Move up!");
       hero.moveUp();
       hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );
 end




 
rule "CANNOT MOVE UP 1"
salience hero.getStat(StatAbility.SPEED) * 100
    when
    	Settings( gameOver == false )
		action : PlayerAction(action == Moves.GO_UP ) 
		hero : Hero ( col <= 0 ) 
		
    then
       System.out.println("Cannot Move up!");
       hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );
 end



 
rule "CANNOT MOVE UP 2"
salience hero.getStat(StatAbility.SPEED) * 100
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_UP) 
		hero : Hero ( ) and
		LocatedOnMap (steppable==0 && col == hero.getCol()-1 && row == hero.getRow() )

		
    then
       System.out.println("Cannot Move up!");
       hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );
 end
 



 
rule "MOVE LEFT"
salience hero.getStat(StatAbility.SPEED) * 100
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_LEFT ) 
		hero : Hero ( row > 0 ) 
		not LocatedOnMap (steppable==0 && col == hero.getCol() && row == hero.getRow() -1 )

		
    then
       System.out.println("Move left!");
       hero.moveLeft();
       hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );
 end





 
rule "CANNOT MOVE LEFT 1"
salience hero.getStat(StatAbility.SPEED) * 100
   
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_LEFT ) 
		hero : Hero ( row <= 0 ) 
		
    then
       System.out.println("Cannot Move left!");
       hero.setStatus(Status.MOVED);
       retract( action );
       update ( hero );
 end




 
rule "CANNOT MOVE LEFT 2"
salience hero.getStat(StatAbility.SPEED) * 100
    
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_LEFT ) 
		hero : Hero (  ) 
		LocatedOnMap (steppable==0 && col == hero.getCol() && row == hero.getRow()-1 )

		
    then
       System.out.println("Cannot Move left!");
       hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );
 end
 
 

 
 
 
 
 
 
 
 // REGOLE PER IL COMBATTIMENTO
 
rule "ATTACK RIGHT"
salience hero.getStat(StatAbility.SPEED) * 100
    
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_RIGHT) 
		hero : Hero () 
		npc: NPC (col == hero.getCol() && row == hero.getRow()+1)
		
    then
       System.out.println("Attacking enemy!");
       npc.increment(StatAbility.LIFE, -(hero.getStat(StatAbility.ATK)));
       hero.setStatus(Status.MOVED);
	   retract( action );
	   update ( hero );       
       update ( npc );       

 end
 
 
 
 
 rule "ATTACK RIGHT BUT NO ENEMY"
 salience hero.getStat(StatAbility.SPEED) * 100
     
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_RIGHT ) 
		hero : Hero () and 
		not NPC (col == hero.getCol() && row == hero.getRow()+1)
		
    then
       System.out.println("Everyone fights their inner demons ... but there is no need to attack the wind!");
       hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );

 end
 
 
 
 
 
rule "ATTACK LEFT"
salience hero.getStat(StatAbility.SPEED) * 100
   
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_LEFT) 
		hero : Hero () and 
		npc: NPC (col == hero.getCol() && row == hero.getRow()-1)
		
    then
       System.out.println("Attacking enemy!");
       npc.increment(StatAbility.LIFE, -(hero.getStat(StatAbility.ATK)));
       hero.setStatus(Status.MOVED);
       update ( npc );  
       update ( hero );     
       retract( action );

 end
 
 
 
 
rule "ATTACK LEFT BUT NO ENEMY"
salience hero.getStat(StatAbility.SPEED) * 100
     
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_LEFT ) 
		hero : Hero () 
		not NPC (col == hero.getCol() && row == hero.getRow()-1)
		
    then
       System.out.println("Everyone fights their inner demons ... but there is no need to attack the wind!");
       hero.setStatus(Status.MOVED);
       retract( action );
       update ( hero );

 end
 
 
 
 
rule "ATTACK UP"
salience hero.getStat(StatAbility.SPEED) * 100
    
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_UP ) 
		hero : Hero () and 
		npc: NPC (col == hero.getCol()-1 && row == hero.getRow())
		
    then
       System.out.println("Attacking enemy!");
       npc.increment(StatAbility.LIFE, -(hero.getStat(StatAbility.ATK)));
       hero.setStatus(Status.MOVED);
       retract( action );
       update ( npc );  
       update( hero );     

 end
 
 
 
 
rule "ATTACK UP BUT NO ENEMY"
salience hero.getStat(StatAbility.SPEED) * 100
     
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_UP ) 
		hero : Hero () 
		not NPC (col == hero.getCol()-1 && row == hero.getRow())
		
    then
       System.out.println("Everyone fights their inner demons ... but there is no need to attack the wind!");
       hero.setStatus(Status.MOVED);
       retract( action );
	   update( hero );
 end
 
 
 
 
 
 rule "ATTACK DOWN"
 salience hero.getStat(StatAbility.SPEED) * 100
     
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_DOWN ) 
		hero : Hero () and 
		npc: NPC (col == hero.getCol()+1 && row == hero.getRow())
		
    then
       System.out.println("Attacking enemy!");
       npc.increment(StatAbility.LIFE, -(hero.getStat(StatAbility.ATK)));
       hero.setStatus(Status.MOVED);
	   retract( action );
       update ( npc );       
       update( hero );

 end
 
 
 
 
rule "ATTACK DOWN BUT NO ENEMY"
     salience hero.getStat(StatAbility.SPEED) * 100
     
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.ATTACK_DOWN) 
		hero : Hero () 
		not NPC (col == hero.getCol()+1 && row == hero.getRow())
		
    then
       System.out.println("Everyone fights their inner demons ... but there is no need to attack the wind!");
       hero.setStatus(Status.MOVED);
       retract( action );
       update( hero );

 end
 

 
 
 
 
 
 rule "CRAFT"
 salience hero.getStat(StatAbility.SPEED) * 100
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.CRAFT ) 
		hero : Hero () 
		craft: CraftObject (col == hero.getCol() && row == hero.getRow())
		
    then
       System.out.println("Crafting...");
       hero.increment( craft.getStatToIncrease(), craft.getBonus());
       craft.setAvaiability(craft.getAvaiability() - 1); 
       
       System.out.println("New stats: "+hero.getActualStat().toString() );
       
       hero.setStatus(Status.MOVED);
       retract( action );
       update ( hero );
       update ( craft );       

 end
 
 
 
 
 
rule "REMOVE CRAFT"
salience 100000
    when
		
		craft: CraftObject ( avaiability <= 0 )
		
    then
    	
    	retract( craft );

 	end
 
  
  
  
  
rule "CRAFT WITHOUT OBJECT"
salience hero.getStat(StatAbility.SPEED) * 100
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.CRAFT ) 
		hero : Hero () and 
		not CraftObject (col == hero.getCol() && row == hero.getRow())
		
    then
       System.out.println("Some might say that 'he who seeks finds', but this time you only found mud");
       hero.setStatus(Status.MOVED);
       retract( action );
       update(hero);

 end
 
  rule "PUT TRAP"
 salience hero.getStat(StatAbility.SPEED) * 100
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.PUT_TRAP ) 
		hero : Hero () 
		not craft: CraftObject (col == hero.getCol() && row == hero.getRow())
		
    then
       System.out.println("Putting trap...");
       int randomMalus = ThreadLocalRandom.current().nextInt(0, hero.getStat(StatAbility.SHREWDNESS) + 1);
       insert (new CraftObject(hero.getCol() , hero.getRow() ,StatAbility.LIFE, -randomMalus, 1) );
       hero.setStatus(Status.MOVED);
       retract( action );
       update ( hero );

 end
 
 */
 