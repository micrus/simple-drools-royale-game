package com.sample
import java.util.concurrent.ThreadLocalRandom;

import com.sample.Logger;

rule "MOVE RIGHT"
 salience action.getPriority()
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_RIGHT, whoMoves : whoMoves  ) 
		character : Character (this == whoMoves && status== Status.NOT_MOVED && row < setting.getDimension() - 1 ) 
		not LocatedOnMap (steppable==0 && col == character.getCol() && (row == character.getRow() +1) )
	
	then
       Logger.getInstance().println(character.getSimbol()+" move right!");
       character.moveRight();
	   character.setStatus(Status.MOVED);
       update( character );
 end

rule "MOVE LEFT"
 salience action.getPriority()
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_LEFT, whoMoves : whoMoves  ) 
		character : Character (this == whoMoves && status== Status.NOT_MOVED && row > 0 ) 
		not LocatedOnMap (steppable==0 && col == character.getCol() && (row == character.getRow() -1) )
	
	then
       Logger.getInstance().println(character.getSimbol()+" move left!");
       character.moveLeft();
	   character.setStatus(Status.MOVED);
       update( character );
 end

rule "MOVE UP"
 salience action.getPriority()
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_UP, whoMoves : whoMoves  ) 
		character : Character (this == whoMoves && status== Status.NOT_MOVED && col > 0 ) 
		not LocatedOnMap (steppable==0 && col == character.getCol()-1 && (row == character.getRow()) )
	
	then
       Logger.getInstance().println(character.getSimbol()+" move up!");
       character.moveUp();
	   character.setStatus(Status.MOVED);
       update( character );
 end
 
rule "MOVE DOWN"
 salience action.getPriority()
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_DOWN, whoMoves : whoMoves  ) 
		character : Character (this == whoMoves && status== Status.NOT_MOVED && col < setting.getDimension() - 1 ) 
		not LocatedOnMap (steppable==0 && col == character.getCol()+1 && (row == character.getRow()) )
	
	then
       Logger.getInstance().println(character.getSimbol()+" move down!");
       character.moveDown();
	   character.setStatus(Status.MOVED);
       update( character );
 end
 
rule "MOVE DOWN-RIGHT"
 salience action.getPriority()
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_DOWN_RIGHT, whoMoves : whoMoves  ) 
		character : Character (this == whoMoves && status== Status.NOT_MOVED && col < setting.getDimension() - 1 && row < setting.getDimension() - 1) 
		not LocatedOnMap (steppable==0 && col == character.getCol()+1 && (row == character.getRow()+1) )
		
	
	then
       Logger.getInstance().println(character.getSimbol()+" move down-right!");
       character.moveDownRight();
	   character.setStatus(Status.MOVED);
       update( character );
 end
 
 rule "MOVE DOWN-LEFT"
 salience action.getPriority()
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_DOWN_LEFT, whoMoves : whoMoves  ) 
		character : Character (this == whoMoves && status== Status.NOT_MOVED && col < setting.getDimension() - 1 && row > 0) 
		not LocatedOnMap (steppable==0 && col == character.getCol()+1 && (row == character.getRow()-1) )
		
	
	then
       Logger.getInstance().println(character.getSimbol()+" move down-left!");
       character.moveDownLeft();
	   character.setStatus(Status.MOVED);
       update( character );
 end

rule "MOVE UP-RIGHT"
 salience action.getPriority()
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_UP_RIGHT, whoMoves : whoMoves  ) 
		character : Character (this == whoMoves && status== Status.NOT_MOVED && col >0 && row < setting.getDimension() - 1) 
		not LocatedOnMap (steppable==0 && col == character.getCol()-1 && (row == character.getRow()+1) )
		
	
	then
       Logger.getInstance().println(character.getSimbol()+" move up-right!");
       character.moveUpRight();
	   character.setStatus(Status.MOVED);
       update( character );
 end
 
 rule "MOVE UP-LEFT"
 salience action.getPriority()
    when
	    setting : Settings( gameOver == false )
		action : PlayerAction( action == Moves.GO_UP_LEFT, whoMoves : whoMoves  ) 
		character : Character (this == whoMoves && status== Status.NOT_MOVED && col >0 && row >0) 
		not LocatedOnMap (steppable==0 && col == character.getCol()-1 && (row == character.getRow()-1) )
		
	
	then
       Logger.getInstance().println(character.getSimbol()+" move up-left!");
       character.moveUpLeft();
	   character.setStatus(Status.MOVED);
       update( character );
 end
 
 //==========================TRAP AND CRAFT================================
 
   rule "PUT TRAP"
   salience action.getPriority()
    when
    	Settings( gameOver == false )
		action : PlayerAction( action == Moves.PUT_TRAP, whoMoves : whoMoves ) 
		character : Character (this == whoMoves && status== Status.NOT_MOVED )
		not CraftObject (col == character.getCol() && row == character.getRow())
		
    then
       Logger.getInstance().println(character.getSimbol()+" is putting trap...");
       insert (new Trap(character.getCol() , character.getRow() , character) );
       character.setStatus(Status.MOVED);
       update ( character );
 end

 rule "STEP ON A TRAP"
 salience 200000
 	when
 		Settings( gameOver == false )
 		trap: Trap( availability > 0 ,positioner : positioner)
 		character : Character (this != positioner && col == trap.getCol() && row == trap.getRow())
 	then
 		character.increment(StatAbility.LIFE, - trap.getMalus());
 		trap.setAvailability(trap.getAvailability() - 1 );
 		Logger.getInstance().println(character.getSimbol()+" stepped on a trap! The "+trap.getMalus()+" damage inflicted lead him to a remaining LIFE of "+character.getStat(StatAbility.LIFE));
 		update (trap);
 		update (character);
 end


 rule "TAKE CONSUMABLE CRAFT"
 salience action.getPriority()
    when
    	Settings( gameOver == false )
		action : CraftAction( keep == 1, whoMoves : whoMoves ) 
		character : Character (this == whoMoves && status== Status.NOT_MOVED )
		craft: ConsumableCraftObject (col == character.getCol() && row == character.getRow())
		
    then
       int powerUp = craft.getBonus()+ character.getStat(StatAbility.LUCK);
       Logger.getInstance().println(character.getSimbol()+" is crafting... "+craft.getStatToIncrease()+" increment of "+ powerUp);
       character.increment(craft.getStatToIncrease(), powerUp);
       craft.setAvailability(craft.getAvailability() - 1); 
              
       character.setStatus(Status.MOVED);
       update ( craft );        
       update ( character );

 end
 
 rule "STEP ON A SOUL"
 salience 200000
 	when
 		Settings( gameOver == false )
 		soul: PlayerSoul( availability > 0 ,row_s: row, col_s: col)
 		character : Character (col == col_s && row == row_s)
 	then
 		character.increment(StatAbility.LIFE, soul.getLifeBonus());
 		character.levelUp();
 		soul.setAvailability(soul.getAvailability() - 1 );
 		Logger.getInstance().println(character.getSimbol()+" catch the soul of a tired warrior! Level up!");
 		update (soul);
 		update (character);
 end
 
 
 
  rule "TAKE WEAPON CRAFT"
 salience action.getPriority()
    when
    	Settings( gameOver == false )
		action : CraftAction( keep == 1, whoMoves : whoMoves ) 
		character : Character (this == whoMoves && status== Status.NOT_MOVED )
		craft: WeaponCraftObject (col == character.getCol() && row == character.getRow())
		
    then
       Logger.getInstance().println(character.getSimbol()+" is crafting... "+" he have found a "+craft.getWeapon().getWeaponName()+" and decided to keep it!");
       
       character.setWeapon(craft.getWeapon());
       craft.setAvailability(craft.getAvailability() - 1);        
       character.setStatus(Status.MOVED);
       
       update ( craft );        
       update ( character );

 end
 
 
 rule "DISCARD CRAFT"
 salience action.getPriority()
    when
    	Settings( gameOver == false )
		action : CraftAction( keep == 0, whoMoves : whoMoves ) 
		character : Character (this == whoMoves && status== Status.NOT_MOVED )
		craft: CraftObject (col == character.getCol() && row == character.getRow())
		
    then
	   Logger.getInstance().println(character.getSimbol() + " is crafting... but nah, he do not keep the craft");              
       character.setStatus(Status.MOVED);
       update ( character );

 end
 
 rule "REMOVE CRAFT"
salience 100000
    when	
		craft: CraftObject ( availability <= 0 )	
    then  	
    	retract( craft );
 	end
 
 //====================COMBACT RULES=============================

rule "COMBACT: DEFENDER ELUDE ATTACK"
salience action.getPriority()
	when 
	  	Settings( gameOver == false )
		action : FightAction( this.offenderTryAttackValue()<this.defenderTryEludeValue(), whoMoves : whoMoves, defensor : defender ) 
		offender : Character(this == whoMoves && status == Status.NOT_MOVED, orow : row, ocol : col)
		defender : Character(this == defensor && row in (orow, orow + 1, orow -1) && col in (ocol, ocol+1, ocol-1))
		
	then
		Logger.getInstance().println(offender.getSimbol()+" tries to attack "+action.getDefender().getSimbol()+" but he eludes the attack!");
		offender.setStatus(Status.MOVED);
        update ( offender );
end

rule "COMBACT: DEFENDER TAKE THE ATTACK"
salience action.getPriority()

	when 
	  	Settings( gameOver == false )
		action : FightAction( this.offenderTryAttackValue()>=this.defenderTryEludeValue(), whoMoves : whoMoves, defensor : defender ) 
		offender : Character(this == whoMoves && status == Status.NOT_MOVED, orow : row, ocol : col)
		defender : Character(this == defensor && row in (orow, orow + 1, orow -1) && col in (ocol, ocol+1, ocol-1) )
		
	then
		int damage = action.offenderDamageValue();
        defender.increment(StatAbility.LIFE, -damage);
        Logger.getInstance().println(offender.getSimbol()+" inflict "+damage+" damage to "+action.getDefender().getSimbol()+"! His remaining life is: "+defender.getStat(StatAbility.LIFE));
		offender.setStatus(Status.MOVED);
        update( defender );
        update ( offender );
end






//======================END RULES=================================
rule "INVALID MOVE"
	when 
		hero : Hero (status == Status.NOT_MOVED)
	then 
		Logger.getInstance().println("What are you doing? Fight instead of waisting time in useless action!");
		hero.setStatus(Status.MOVED);
		update (hero);
end



rule "RETRACT ACTION"
when 
    action:	PlayerAction()
	not Character(status == Status.NOT_MOVED)
then 
	retract (action);
end
